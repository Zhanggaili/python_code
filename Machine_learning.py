{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 次采样正确率： 0.6331032576\n",
      "20 次采样正确率： 0.7553372033163932\n",
      "30 次采样正确率： 0.8246309464931707\n",
      "40 次采样正确率： 0.8702342941780972\n",
      "50 次采样正确率： 0.9021926358467504\n",
      "60 次采样正确率： 0.9253763056485725\n",
      "70 次采样正确率： 0.9425655385148007\n",
      "80 次采样正确率： 0.9555029441181861\n",
      "90 次采样正确率： 0.9653473393248491\n",
      "100 次采样正确率： 0.972900802242991\n"
     ]
    }
   ],
   "source": [
    "# %load 6.1.Ensumble.py\n",
    "#!/usr/bin/python\n",
    "\n",
    "import operator\n",
    "from functools import reduce\n",
    "\n",
    "def c(n, k):\n",
    "    return reduce(operator.mul, range(n-k+1, n+1)) / reduce(operator.mul, range(1, k+1))\n",
    "\n",
    "\n",
    "def bagging(n, p):\n",
    "    s = 0\n",
    "    for i in range(n // 2 + 1, n + 1):\n",
    "        s += c(n, i) * p ** i * (1 - p) ** (n - i)\n",
    "    return s\n",
    " \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    for t in range(10, 101, 10):\n",
    "        print (t, '次采样正确率：', bagging(t, 0.6))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "Missing parentheses in call to 'print'. Did you mean print(x)? (<ipython-input-2-286ee9e62152>, line 49)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-2-286ee9e62152>\"\u001b[1;36m, line \u001b[1;32m49\u001b[0m\n\u001b[1;33m    print x\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print(x)?\n"
     ]
    }
   ],
   "source": [
    "# %load 8.1.Advertising.py\n",
    "#!/usr/bin/python\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    path = '8.Advertising.csv'\n",
    "    # # 手写读取数据 - 请自行分析，在8.2.Iris代码中给出类似的例子\n",
    "    # f = file(path)\n",
    "    # x = []\n",
    "    # y = []\n",
    "    # for i, d in enumerate(f):\n",
    "    #     if i == 0:\n",
    "    #         continue\n",
    "    #     d = d.strip()\n",
    "    #     if not d:\n",
    "    #         continue\n",
    "    #     d = map(float, d.split(','))\n",
    "    #     x.append(d[1:-1])\n",
    "    #     y.append(d[-1])\n",
    "    # print x\n",
    "    # print y\n",
    "    # x = np.array(x)\n",
    "    # y = np.array(y)\n",
    "\n",
    "    # # Python自带库\n",
    "    # f = file(path, 'rb')\n",
    "    # print f\n",
    "    # d = csv.reader(f)\n",
    "    # for line in d:\n",
    "    #     print line\n",
    "    # f.close()\n",
    "\n",
    "    # # numpy读入\n",
    "    # p = np.loadtxt(path, delimiter=',', skiprows=1)\n",
    "    # print p\n",
    "\n",
    "    # pandas读入\n",
    "    data = pd.read_csv(path)    # TV、Radio、Newspaper、Sales\n",
    "    x = data[['TV', 'Radio', 'Newspaper']]\n",
    "    # x = data[['TV', 'Radio']]\n",
    "    y = data['Sales']\n",
    "    print (x)\n",
    "    print (y)\n",
    "\n",
    "    # # 绘制1\n",
    "    plt.plot(data['TV'], y, 'ro', label='TV')\n",
    "    plt.plot(data['Radio'], y, 'g^', label='Radio')\n",
    "    plt.plot(data['Newspaper'], y, 'mv', label='Newspaer')\n",
    "    plt.legend(loc='lower right')\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "    # #\n",
    "    # # 绘制2\n",
    "    # plt.figure(figsize=(9,12))\n",
    "    # plt.subplot(311)\n",
    "    # plt.plot(data['TV'], y, 'ro')\n",
    "    # plt.title('TV')\n",
    "    # plt.grid()\n",
    "    # plt.subplot(312)\n",
    "    # plt.plot(data['Radio'], y, 'g^')\n",
    "    # plt.title('Radio')\n",
    "    # plt.grid()\n",
    "    # plt.subplot(313)\n",
    "    # plt.plot(data['Newspaper'], y, 'b*')\n",
    "    # plt.title('Newspaper')\n",
    "    # plt.grid()\n",
    "    # plt.tight_layout()\n",
    "    # plt.show()\n",
    "\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1)\n",
    "    # print x_train, y_train\n",
    "    linreg = LinearRegression()\n",
    "    model = linreg.fit(x_train, y_train)\n",
    "    print (model)\n",
    "    print (linreg.coef_)\n",
    "    print (linreg.intercept_)\n",
    "\n",
    "    y_hat = linreg.predict(np.array(x_test))\n",
    "    mse = np.average((y_hat - np.array(y_test)) ** 2)  # Mean Squared Error\n",
    "    rmse = np.sqrt(mse)  # Root Mean Squared Error\n",
    "    print mse, rmse\n",
    "\n",
    "    t = np.arange(len(x_test))\n",
    "    plt.plot(t, y_test, 'r-', linewidth=2, label='Test')\n",
    "    plt.plot(t, y_hat, 'g-', linewidth=2, label='Predict')\n",
    "    plt.legend(loc='upper right')\n",
    "    plt.grid()\n",
    "    plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
